/* Auto-generated by genmsg_cpp for file /home/mario/catkin_ws/src/eclipse_test/msg/odom_save.msg */
#ifndef ODOMETRY_SERVER_MESSAGE_ODOM_SAVE_H
#define ODOMETRY_SERVER_MESSAGE_ODOM_SAVE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace odometry_server
{
template <class ContainerAllocator>
struct odom_save_ {
  typedef odom_save_<ContainerAllocator> Type;

  odom_save_()
  : nr(0)
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  {
  }

  odom_save_(const ContainerAllocator& _alloc)
  : nr(0)
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  {
  }

  typedef int32_t _nr_type;
  int32_t nr;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _theta_type;
  double theta;


  typedef boost::shared_ptr< ::odometry_server::odom_save_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::odometry_server::odom_save_<ContainerAllocator>  const> ConstPtr;
}; // struct odom_save
typedef  ::odometry_server::odom_save_<std::allocator<void> > odom_save;

typedef boost::shared_ptr< ::odometry_server::odom_save> odom_savePtr;
typedef boost::shared_ptr< ::odometry_server::odom_save const> odom_saveConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::odometry_server::odom_save_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::odometry_server::odom_save_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace odometry_server

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::odometry_server::odom_save_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::odometry_server::odom_save_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::odometry_server::odom_save_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e2b3d03ee57f571be55f3fa2422681be";
  }

  static const char* value(const  ::odometry_server::odom_save_<ContainerAllocator> &) { return value(); }
  static const uint64_t static_value1 = 0xe2b3d03ee57f571bULL;
  static const uint64_t static_value2 = 0xe55f3fa2422681beULL;
};

template<class ContainerAllocator>
struct DataType< ::odometry_server::odom_save_<ContainerAllocator> > {
  static const char* value() 
  {
    return "odometry_server/odom_save";
  }

  static const char* value(const  ::odometry_server::odom_save_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::odometry_server::odom_save_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 nr\n\
float64 x\n\
float64 y\n\
float64 theta \n\
\n\
";
  }

  static const char* value(const  ::odometry_server::odom_save_<ContainerAllocator> &) { return value(); }
};

template<class ContainerAllocator> struct IsFixedSize< ::odometry_server::odom_save_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::odometry_server::odom_save_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.nr);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct odom_save_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::odometry_server::odom_save_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::odometry_server::odom_save_<ContainerAllocator> & v)
  {
    s << indent << "nr: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nr);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ODOMETRY_SERVER_MESSAGE_ODOM_SAVE_H

